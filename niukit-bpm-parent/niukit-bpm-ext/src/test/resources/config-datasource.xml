<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
           http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/util    http://www.springframework.org/schema/util/spring-util-2.5.xsd
       ">

	<context:annotation-config />
	<context:component-scan base-package="com.woshidaniu.**" />
	<context:component-scan base-package="com.woshidaniu.**.impl" />

	<util:properties id="dbProps" location="classpath:db.properties" />

	<bean id="serviceFactory" class="com.woshidaniu.common.factory.ServiceFactory" />

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.woshidaniu.pool.ZfDataSource" init-method="init" destroy-method="close">
		<property name="url" value="#{dbProps['db.url']}"></property>
		<property name="username" value="#{dbProps['db.username']}"></property>
		<property name="password" value="#{dbProps['db.password']}"></property>
		<property name="connectionProperties" value="#{dbProps['db.connectionProperties']}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="#{dbProps['db.initialSize']}" />
		<property name="minIdle" value="#{dbProps['db.minIdle']}" />
		<property name="maxActive" value="#{dbProps['db.maxActive']}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="#{dbProps['db.maxWait']}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="#{dbProps['db.timeBetweenEvictionRunsMillis']}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="#{dbProps['db.minEvictableIdleTimeMillis']}" />
		<property name="validationQuery" value="#{dbProps['db.validationQuery']}" />
		<property name="testWhileIdle" value="#{dbProps['db.testWhileIdle']}" />
		<property name="testOnBorrow" value="#{dbProps['db.testOnBorrow']}" />
		<property name="testOnReturn" value="#{dbProps['db.testOnReturn']}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="#{dbProps['db.poolPreparedStatements']}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="#{dbProps['db.maxPoolPreparedStatementPerConnectionSize']}" />
		<property name="filters" value="#{dbProps['db.filters']}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="proxyFilters">
          <list>
              <ref bean="wall-filter"/>
          </list>
     	</property>
	</bean>

	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
		  <property name="dir" value="META-INF/druid/wall/oracle" />
	      <property name="commentAllow" value="true" />
	      <property name="noneBaseStatementAllow" value="true" />
	      <property name="multiStatementAllow" value="true" />
	</bean>

  	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
      	<property name="config" ref="wall-filter-config" />
    </bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:conf/comm/sqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath*:com/woshidaniu/**/sqlmap/**/*.xml" />
	</bean>

	<bean id="mapperScannerConfigurer"  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.woshidaniu.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>

	<!-- 管理事务操作 -->
	<bean name="transactionManager" id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<aop:config>
		<aop:pointcut id="servicesPointcut" expression="execution(* com.woshidaniu..service..*.*(..))  and !execution(* com.woshidaniu.workflow.service..*(..)) " />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicesPointcut" />
	</aop:config>
	
	<!-- 事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="zj*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="xg*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="sc*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

</beans>