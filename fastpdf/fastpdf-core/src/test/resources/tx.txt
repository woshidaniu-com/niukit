DTD编写

<?xml version="1.0"?>
<!DOCTYPE note [
  <!ELEMENT note (to,from,heading,body)>
  <!ELEMENT to      (#PCDATA)>
  <!ELEMENT from    (#PCDATA)>
  <!ELEMENT heading (#PCDATA)>
  <!ELEMENT body    (#PCDATA)>
]>
<note>
  <to>George</to>
  <from>John</from>
  <heading>Reminder</heading>
  <body>Don't forget the meeting!</body>
</note>

以上 DTD 解释如下：

!DOCTYPE note (第二行)定义此文档是 note 类型的文档。

!ELEMENT note (第三行)定义 note 元素有四个元素："to、from、heading,、body"

!ELEMENT to (第四行)定义 to 元素为 "#PCDATA" 类型

!ELEMENT from (第五行)定义 frome 元素为 "#PCDATA" 类型

!ELEMENT heading (第六行)定义 heading 元素为 "#PCDATA" 类型

!ELEMENT body (第七行)定义 body 元素为 "#PCDATA" 类型

所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：

    元素
    属性
    实体
    PCDATA
    CDATA

元素

元素是 XML 以及 HTML 文档的主要构建模块。

HTML 元素的例子是 "body" 和 "table"。XML 元素的例子是 "note" 和 "message" 。元素可包含文本、其他元素或者是空的。空的 

HTML 元素的例子是 "hr"、"br" 以及 "img"。
实例：

<body>body text in between</body>
<message>some message in between</message>

属性

属性可提供有关元素的额外信息。

属性总是被置于某元素的开始标签中。属性总是以名称/值的形式成对出现的。下面的 "img" 元素拥有关于源文件的额外信息：

<img src="computer.gif" />

元素的名称是 "img"。属性的名称是 "src"。属性的值是 "computer.gif"。由于元素本身为空，它被一个 " /" 关闭。
实体

实体是用来定义普通文本的变量。实体引用是对实体的引用。

大多数同学都了解这个 HTML 实体引用："&nbsp;"。这个“无折行空格”实体在 HTML 中被用于在某个文档中插入一个额外的空格。

当文档被 XML 解析器解析时，实体就会被展开。
下面的实体在 XML 中被预定义：
实体引用	字符
&lt; 	<
&gt; 	>
&amp; 	&
&quot; 	"
&apos; 	'
PCDATA

PCDATA 的意思是被解析的字符数据（parsed character data）。

可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。

PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。

文本中的标签会被当作标记来处理，而实体会被展开。

不过，被解析的字符数据不应当包含任何 &、< 或者 > 字符；需要使用 &amp;、&lt; 以及 &gt; 实体来分别替换它们。
CDATA

CDATA 的意思是字符数据（character data）。

CDATA 是不会被解析器解析的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。
声明一个元素

在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：

<!ELEMENT 元素名称 类别>

或者

<!ELEMENT 元素名称 (元素内容)>

空元素

空元素通过类别关键词EMPTY进行声明：

<!ELEMENT 元素名称 EMPTY>

例子：

<!ELEMENT br EMPTY>

XML例子：

<br />

只有 PCDATA 的元素

只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明：

<!ELEMENT 元素名称 (#PCDATA)>

例子：

<!ELEMENT from (#PCDATA)>

带有任何内容的元素

通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：

<!ELEMENT 元素名称 ANY>

例子：

<!ELEMENT note ANY>

带有子元素（序列）的元素

带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：

<!ELEMENT 元素名称 (子元素名称 1)>

或者

<!ELEMENT 元素名称 (子元素名称 1,子元素名称 2,.....)>

例子：

<!ELEMENT note (to,from,heading,body)>

当子元素按照由逗号分隔开的序列进行声明时，这些子元素必须按照相同的顺序出现在文档中。在一个完整的声明中，子元素也必须

被声明，同时子元素也可拥有子元素。"note" 元素的完整声明是：

<!ELEMENT note (to,from,heading,body)>
<!ELEMENT to      (#PCDATA)>
<!ELEMENT from    (#PCDATA)>
<!ELEMENT heading (#PCDATA)>
<!ELEMENT body    (#PCDATA)>

声明只出现一次的元素

<!ELEMENT 元素名称 (子元素名称)>

例子：

<!ELEMENT note (message)>

上面的例子声明了：message 子元素必须出现一次，并且必须只在 "note" 元素中出现一次。
声明最少出现一次的元素

<!ELEMENT 元素名称 (子元素名称+)>

例子：

<!ELEMENT note (message+)>

上面的例子中的加号声明了：message 子元素必须在 "note" 元素内出现至少一次。
声明出现零次或多次的元素

<!ELEMENT 元素名称 (子元素名称*)>

例子：

<!ELEMENT note (message*)>

上面的例子中的星号声明了：子元素 message 可在 "note" 元素内出现零次或多次。
声明出现零次或一次的元素

<!ELEMENT 元素名称 (子元素名称?)>

例子：

<!ELEMENT note (message?)>

上面的例子中的问号声明了：子元素 message 可在 "note" 元素内出现零次或一次。
声明“非.../既...”类型的内容
例子：

<!ELEMENT note (to,from,header,(message|body))>

上面的例子声明了："note" 元素必须包含 "to" 元素、"from" 元素、"header" 元素，以及非 "message" 元素既 "body" 元素。
声明混合型的内容
例子：

<!ELEMENT note (#PCDATA|to|from|header|message)*>

上面的例子声明了："note" 元素可包含出现零次或多次的 PCDATA、"to"、"from"、"header" 或者 "message"。

 
声明属性

属性声明使用下列语法：

<!ATTLIST 元素名称 属性名称  属性类型  默认值>

DTD 实例:

<!ATTLIST payment type CDATA "check">

XML 实例:

<payment type="check" />

以下是属性类型的选项：
类型	描述
CDATA 	值为字符数据 (character data)
(en1|en2|..) 	此值是枚举列表中的一个值
ID 	值为唯一的 id
IDREF 	值为另外一个元素的 id
IDREFS 	值为其他 id 的列表
NMTOKEN 	值为合法的 XML 名称
NMTOKENS 	值为合法的 XML 名称的列表
ENTITY 	值是一个实体
ENTITIES 	值是一个实体列表
NOTATION 	此值是符号的名称
xml: 	值是一个预定义的 XML 值
默认值参数可使用下列值：
值	解释
值 	属性的默认值
#REQUIRED 	属性值是必需的
#IMPLIED 	属性不是必需的
#FIXED value 	属性值是固定的
规定一个默认的属性值
DTD:

<!ELEMENT square EMPTY>
<!ATTLIST square width CDATA "0">

合法的 XML:

<square width="100" />

在上面的例子中，"square" 被定义为带有 CDATA 类型的 "width" 属性的空元素。如果宽度没有被设定，其默认值为0 。
#IMPLIED
语法

<!ATTLIST 元素名称 属性名称 属性类型 #IMPLIED>

例子

DTD:

<!ATTLIST contact fax CDATA #IMPLIED>

合法的 XML:

<contact fax="555-667788" />

合法的 XML:

<contact />

假如您不希望强制作者包含属性，并且您没有默认值选项的话，请使用关键词 #IMPLIED。
#REQUIRED
语法

<!ATTLIST 元素名称 属性名称 属性类型 #REQUIRED>

例子

DTD:

<!ATTLIST person number CDATA #REQUIRED>

合法的 XML:

<person number="5677" />

非法的 XML:

<person />

假如您没有默认值选项，但是仍然希望强制作者提交属性的话，请使用关键词 #REQUIRED。
#FIXED
语法

<!ATTLIST 元素名称 属性名称 属性类型 #FIXED "value">

例子

DTD:

<!ATTLIST sender company CDATA #FIXED "Microsoft">

合法的 XML:

<sender company="Microsoft" />

非法的 XML:

<sender company="W3School" />

如果您希望属性拥有固定的值，并不允许作者改变这个值，请使用 #FIXED 关键词。如果作者使用了不同的值，XML 解析器会返回错

误。
列举属性值
语法：

<!ATTLIST 元素名称 属性名称 (en1|en2|..) 默认值>

DTD 例子:

<!ATTLIST payment type (check|cash) "cash">

XML 例子:

<payment type="check" />

或者

<payment type="cash" />

如果您希望属性值为一系列固定的合法值之一，请使用列举属性值。

 

 
一个内部实体声明
语法：

<!ENTITY 实体名称 "实体的值">

例子：

DTD 例子:

<!ENTITY writer "Bill Gates">
<!ENTITY copyright "Copyright W3School.com.cn">

XML 例子:

<author>&writer;&copyright;</author>

注释: 一个实体由三部分构成: 一个和号 (&), 一个实体名称, 以及一个分号 (;)。
一个外部实体声明
语法：

<!ENTITY 实体名称 SYSTEM "URI/URL">

例子：

DTD 例子:

<!ENTITY writer SYSTEM "http://www.w3school.com.cn/dtd/entities.dtd">
<!ENTITY copyright SYSTEM "http://www.w3school.com.cn/dtd/entities.dtd">

XML 例子:

<author>&writer;&copyright;</author>

